services:
  # Development server for OHIF Viewer
  ohif_dev:
    build:
      # 프로젝트 루트 디렉토리로 컨텍스트 설정
      context: ./Viewers
      dockerfile: ./platform/app/.recipes/Nginx-Orthanc-custom/dockerfile.ohif
    image: ohif-ngnix:latest
    container_name: ohif_orthanc
    volumes:
      # Nginx config
      - ./Viewers/platform/app/.recipes/Nginx-Orthanc-custom/config/nginx.conf:/etc/nginx/nginx.conf
      # Logs
      - ./Viewers/platform/app/.recipes/Nginx-Orthanc-custom/logs/nginx:/var/logs/nginx
      - ./Viewers/platform/app/public/config/docker-nginx-orthanc.js:/usr/share/nginx/html/app-config.js
      # Let's Encrypt
      # - letsencrypt_certificates:/etc/letsencrypt
      # - letsencrypt_challenges:/var/www/letsencrypt
    ports:
      - '443:443' # SSL
      - '80:80' # Web
    # environment:
    #   - APP_CONFIG=/usr/share/nginx/html/config/default.js
    #   - APP_CONFIG=./platform/app/public/config/default.js
    depends_on:
      orthanc:
        condition: service_healthy
    restart: on-failure

  # Orthanc DICOM server
  orthanc:
    build:
      context: ./Viewers/platform/app/.recipes/Nginx-Orthanc-custom
      dockerfile: ./dockerfile.orthanc
    image: orthanc:latest
    hostname: orthanc
    container_name: orthanc_dev
    volumes:
      # Config
      - ./Viewers/platform/app/.recipes/Nginx-Orthanc-custom/config/orthanc.json:/etc/orthanc/orthanc.json:ro
      - ./Viewers/platform/app/.recipes/Nginx-Orthanc-custom/config/webhook.lua:/etc/orthanc/scripts/webhook.lua:ro
      # Persist data
      - ./Viewers/platform/app/.recipes/Nginx-Orthanc-custom/volumes/orthanc-db/:/var/lib/orthanc/db/
    restart: unless-stopped
    ports:
      - '4242:4242' # Orthanc REST API
      - '8042:8042' # Orthanc HTTP
    depends_on:
      orchestrator:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8042/system >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 60s
    platform: linux/amd64
  
  orchestrator:
    build:
      context: ./orchestrator
      dockerfile: Dockerfile
    env_file: ./orchestrator/.env
    image: orchestrator:latest
    container_name: orchestrator_dev
    volumes:
      - ./orchestrator:/app
    working_dir: /app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    ports:
      - "8000:8000"
    hostname: cxr-orchestrator
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request,sys; urllib.request.urlopen('http://localhost:8000/healthz', timeout=2); sys.exit(0)"]
      interval: 5s
      timeout: 3s
      retries: 12
      start_period: 10s

networks:
  default:
    name: ohif-dev-network
